function(add_aarith_test testname)
  SET(targetname "${testname}-test")
  add_executable(${targetname} ${ARGN})
  target_link_libraries(${targetname} Catch2::WithMain aarith::Library)
  add_test(NAME ${targetname} COMMAND ${targetname})
endfunction(add_aarith_test)

add_aarith_test(uint integer/uint-test.cpp)
add_aarith_test(uint-exact-operations integer/uint-operations-test.cpp)
add_aarith_test(float-exact-operations-float float/exact_operations-float-test.cpp)
add_aarith_test(uint-comparisons integer/uint-comparisons-test.cpp)
add_aarith_test(string_utils integer/string_utils-test.cpp)
add_aarith_test(uint-anytime integer/uint-anytime-test.cpp)
add_aarith_test(util integer/string_utils-test.cpp)
add_aarith_test(bit-operations core/bit_operations-test.cpp)
add_aarith_test(sint integer/sint-test.cpp integer/sint-operations-test.cpp integer/sint-comparisons-test.cpp)
add_aarith_test(container core/functional-style-test.cpp)


list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/")
find_package(MPIR)
if(MPIR_FOUND)
  add_executable(uint-random-test integer/uint-random-test.cpp)
  target_link_libraries(uint-random-test PRIVATE aarith::Library Catch2::WithMain ${MPIR_LIBRARIES})
  target_include_directories(uint-random-test PRIVATE ${MPIR_INCLUDE_DIR})
  add_test(NAME uint-random-test COMMAND uint-random-test)
else()
  message(WARNING "Could not find MPIR; not building coverage test")
endif()


## coverage

set(BUILD_COVERAGE_DATA TRUE)
if(CMAKE_COMPILER_IS_GNUCXX)
  if("${CMAKE_CXX_COMPILER_ID}" MATCHES "(Apple)?[Cc]lang")
    if("${CMAKE_CXX_COMPILER_VERSION}" VERSION_LESS 3)
      set(BUILD_COVERAGE_DATA FALSE)
    endif()
  endif()
else()
  set(BUILD_COVERAGE_DATA FALSE)
endif()

if(BUILD_COVERAGE_DATA)
  target_compile_options(uint-test PRIVATE --coverage)
  target_link_options(uint-test PRIVATE --coverage)
endif()
